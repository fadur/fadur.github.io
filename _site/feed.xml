<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Feisal Adur</title>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 25 Sep 2016 21:19:33 +0200</pubDate>
    <lastBuildDate>Sun, 25 Sep 2016 21:19:33 +0200</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Development environment with docker</title>
        <description>&lt;h1&gt;Development environment with docker&lt;/h1&gt;

&lt;p&gt;For the last couple of months I&amp;#39;ve switched to permanently using docker for development.
Containers are awesome. In this post I&amp;#39;ll try to address some of the main pain points I was faced with early on and how I&amp;#39;ve managed to resolve them.&lt;/p&gt;

&lt;h3&gt;Persistence&lt;/h3&gt;

&lt;p&gt;The one thing that I&amp;#39;ve found to be particularly painful has been persistence. I like the idea of stateless machines as much as the next guy. Nevertheless it&amp;#39;s quite annoying whenever I&amp;#39;ve had to restore from a postgres backup or re-running migrations again and again.&lt;/p&gt;

&lt;p&gt;There are two options work around this limitation.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Option 1: Forget about containerizing your database. Your database is not stateless. Run it on your host and connect to it as you would any other backing service. After all, this is what you would do in production, right? &lt;/li&gt;
&lt;li&gt;Option 2: Use an intermediary data-only container and back up that volume. You can move it around hosts or even share it with your colleagues.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The later option is the one we&amp;#39;ll be covering in this post. First off, a quick primer on docker volumes.&lt;br&gt;
Docker volumes live beyond your containers lifecycle and thus available to the host, even after you&amp;#39;ve stopped the container.
This is a double edged sword, if you aren&amp;#39;t careful, you&amp;#39;ll from time to time find yourself running out of diskspace.
I find it somewhat convenient as you could make changes outside of a running container. Though I would not recommend doing that, since any running container would be unaware of the changes and result in corrupted files.&lt;br&gt;
Here is a command I use to find information on a volume.   &lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker volume ls -q|head -n1| xargs docker volume inspect  
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;This command will pick the first container and display its details, information like labels if any were applied, name and a mount point. On my host, the folder is located in &lt;code&gt;/var/lib/docker/volumes/{image-tag}/_data.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll start off by creating a volume. For our specific use-case, I am using the official posgres image which can be found here &lt;a href=&quot;https://hub.docker.com/_/postgres/&quot;&gt;https://hub.docker.com/_/postgres/&lt;/a&gt;. Further down, there are few options that we can override.   &lt;/p&gt;

&lt;p&gt;For example, optional environment variables that can be used to define another location, like a subdirectory for the database files. Which is perfect for our use case. So we&amp;#39;ll specify that as our amount point.&lt;/p&gt;

&lt;p&gt;To create that data volume, you would write&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker create -v /var/lib/postgresql/data --name pgdata busybox /bin/true
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;This specifies the mount destination for the volume, and we&amp;#39;ve named it pgdata for reference later on. You can find more details about the volume by typing &lt;code&gt;docker inspect pgdata&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So now when we launch a postgres container we tell docker to mount the volume from our pgdata container. We also have to tell postgres where we want out data. To launch such a container we would write.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -d --volumes-from pgdata \
 -e PGDATA=/var/lib/potgresql/data \
 -e POSTGRES_USER=my_user
 --name postgres postgres 
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;To try it out, run &lt;code&gt;docker exec -it postgres bash&lt;/code&gt;. And once you are in you should be able to access your database as your user &lt;code&gt;psql -U my_user&lt;/code&gt;. 
We can now create a test database and insert some test data.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;create table testing (name varchar(50), age int);
insert into testing (name, age) values ((&amp;#39;Bob&amp;#39;, 23), (&amp;#39;Mike&amp;#39;, 25));
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Now go ahead and log out, stop and remove that container. You should now be able to start an identical container and your data will still be available. &lt;/p&gt;

&lt;p&gt;I&amp;#39;ve found this to be convenient to my workflow. I always have a postgres container running in the background. Only as opposed to one installed on my host, this is a lightweight container perfectly suited for the kind of usage involved in development. This also allows me to evaluate the latest versions of postgres and give the new features a spin without the hassle of setting it up or worries of losing data.  &lt;/p&gt;

&lt;h3&gt;Networking&lt;/h3&gt;

&lt;p&gt;Another neat feature when using docker for development is the internal host resolving. It can sometimes get cumbersome connecting services across projects. What I do is create a network, and launch multiple services that need to communicate on the same network.&lt;br&gt;
As an example you could create a network like this one:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker network create simple_network
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;This will create a network bridge that can be referenced by name. So all subsequent containers launched within this network need only reference each-others names. And docker will take care of the name resolving.&lt;br&gt;
As an example the following command would start redis and expose the default port 6379.  &lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run --network simple_network --name my_redis -d redis
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;This means all containers launched within this network will be able to not only access this container, but simply reference it as &lt;code&gt;my_redis&lt;/code&gt; and docker will take care of the internal resolving.&lt;br&gt;
This is particularly useful when your projects all share the same kind of resources. i.e a database, cache, MQ etc. &lt;/p&gt;

&lt;p&gt;I&amp;#39;ve become quite fond of using docker for development. Even managed to deploy a few services into production. And its definitely something I&amp;#39;ll be using going forward.  &lt;/p&gt;
</description>
        <pubDate>Sun, 25 Sep 2016 21:00:00 +0200</pubDate>
        <link>/2016/09/25/development-environment-with-docker/</link>
        <guid isPermaLink="true">/2016/09/25/development-environment-with-docker/</guid>
        
        
      </item>
    
      <item>
        <title>React</title>
        <description>&lt;p&gt;The following presentation is a tech-session with my team, showcasing React.
For a while I&amp;#39;ve been itching to try out &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React JS&lt;/a&gt;. I finally found a feature with enough weight to justify trying it out.&lt;/p&gt;

&lt;p&gt;The product is a table containing attributes that can be changed. The challenge
was only allowing users to change one field at a time. This would give us an
ability to create an audit trail. &lt;/p&gt;

&lt;p&gt;I wanted to log each individual transaction made, all while giving the user
options where they can justify their actions.&lt;/p&gt;

&lt;video width=&quot;100%&quot; height='auto' controls preload label='Tech-session - React Demo'&gt;
&lt;source src=&quot;https://docyzggpewtrf.cloudfront.net/react-demo.mp4&quot;
    type='video/mp4' /&gt;
&lt;/video&gt;
</description>
        <pubDate>Thu, 24 Sep 2015 21:00:00 +0200</pubDate>
        <link>/videos/2015/09/24/react-demo/</link>
        <guid isPermaLink="true">/videos/2015/09/24/react-demo/</guid>
        
        
        <category>videos</category>
        
      </item>
    
      <item>
        <title>Estimation biases</title>
        <description>&lt;p&gt;One of the most toxic things in a project is estimations. Yet it&amp;#39;s the most cast around notion that at any point during a projects lifespan, anyone is capable of estimating the amount of work left.&lt;/p&gt;

&lt;p&gt;Obviously time lines get thrown around and projections can be made. But then
again, this isn&amp;#39;t the statistical &amp;quot;bias of an estimator&amp;quot; equation we are
discussing. But when accurate human computation is applied to estimating a task and the
amount of oberservable time that is left until the objective is met. One thing is
usually left out. The frame of mind the estimator is in. &lt;/p&gt;

&lt;p&gt;From my personal experience I tend to think hard about what steps are
involved in solving a given task. Usually am not that far off mark. And yet it still ends being completely wrong.&lt;/p&gt;

&lt;p&gt;The crucial mistake here is that I haven&amp;#39;t taken into considerations any of the
other projects, sidetracks and interruptions that take place in this exact
same time frame. The estimation bias, is when you make projections and only consider it an isolated &amp;quot;thing&amp;quot;. It never is.&lt;/p&gt;

&lt;p&gt;The estimation bias comes naturally to all of us. None of us can predict the
future, so the framework we use to estimate is entirely based on the current
situation. This isolated vacuum in time we find ourselves in. And we try to
give ourselves some wiggle room and still end up blind sided.&lt;/p&gt;

&lt;p&gt;Estimations are important and we can&amp;#39;t plan anything without them. So
instead what I&amp;#39;ve been doing as of late is. Together with the stakeholders,
reassess my estimations as often as possible. Sometimes more than once a
day. Why? Well the perception of what the project is needs to adapt a new
reality. Because sidetracks, meetings and interruptions are now part the project as well.    &lt;/p&gt;

&lt;p&gt;Worse is when estimation biases are used to measure progress. Progress is one thing and meeting deadlines is completely different beast. But that&amp;#39;s for a another post.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Mar 2015 00:00:00 +0100</pubDate>
        <link>/2015/03/05/estimations/</link>
        <guid isPermaLink="true">/2015/03/05/estimations/</guid>
        
        
      </item>
    
      <item>
        <title>The beginning</title>
        <description>&lt;p&gt;The this blog starts here. Supposedly the first entry. I&amp;#39;ve previously attempted to regularly blog. I usually fall off at post number three. This time however its going to be different. Coming off a three week vacation, I decided to revive this space.&lt;/p&gt;

&lt;p&gt;I am terrified of becoming the coder in a managerial position who only writes product specs and attends meetings. Needless to say that is what I&amp;#39;ve become as of late.&lt;/p&gt;

&lt;p&gt;Am not big on insights and reflections, basically I need an excuse to start experimenting again. I promised myself to use my downtime in keeping this space fresh with my learnings. Hopefully I&amp;#39;ll keep it up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/morse_code.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Jan 2015 21:00:00 +0100</pubDate>
        <link>/2015/01/31/the-beginning/</link>
        <guid isPermaLink="true">/2015/01/31/the-beginning/</guid>
        
        
      </item>
    
  </channel>
</rss>
